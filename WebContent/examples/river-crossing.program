mod RIVER-CROSSING is
  inc META-LEVEL .
  sorts Side Group State .

  ops left right : -> Side [ctor] .
  op change : Side -> Side .
  
  --- shepherd, wolf, goat, cabbage
  ops s w g c : Side -> Group [ctor] .  
  op __ : Group Group -> Group [ctor assoc comm] .

  op {_} : Group -> State [ctor] .
  op toBeEaten : Group -> Bool .
  
  vars S S' : Side .
  var  G : Group .

  eq [right] : change(left) = right .
  eq [left] : change(right) = left .

  ceq [wolfeatsgoattoBeEaten] : toBeEaten(w(S) g(S) s(S') G) = true if S =/= S' .
  ceq [goateatscabbagetoBeEaten] : toBeEaten(c(S) g(S) s(S') G) = true if S =/= S' .
  eq [falsetoBeEaten] : toBeEaten(G) = false [owise] .

  crl [shepherd] : { s(S) G } => { s(change(S)) G } if not(toBeEaten(s(change(S)) G)) .
  crl [wolf] : { s(S) w(S) G } => { s(change(S)) w(change(S)) G } if not(toBeEaten(s(change(S)) w(change(S)) G)) .
  rl [goat] : { s(S) g(S) G } => { s(change(S)) g(change(S)) G } .
  crl [cabbage] : { s(S) c(S) G } => { s(change(S)) c(change(S)) G } if not(toBeEaten(s(change(S)) c(change(S)) G)) .

endm