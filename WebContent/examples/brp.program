*** The Bounded Retransmission Protocol
*** Author: Kyungmin Bae <kbae4@cs.uiuc.edu>

*** The protocol description is adapted from: 
*** P. Abdulla, L. Annichini and A. Bouajjani, Symbolic verification of lossy channel systems: Application to the bounded retransmission protocol, In: TACAS'99, LNCS 1579, Springer (1999) 208-222

fmod BRP-SYNTAX is 
  protecting BOOL .

  sorts Sender Receiver . 

  --- the sender's status
  --- snd(m) : the sender is sending a msg m
  --- acc(m) : the sender gets an acknowledgement of the acceptance of a msg m
  --- set(m) : the sender is about to send a msg m
  op idle : -> Sender [ctor] .
  ops set snd acc : Msg -> Sender [ctor] .

  --- the receiver's status
  --- rec(m) : the receiver gets a message m
  op wait : -> Receiver [ctor] .
  op rec : Msg -> Receiver [ctor] .

  --- list of messages
  --- first: the first datum, last: the last datum, 0/1: the alternating bit
  sorts Msg MsgL . 
  subsort Msg < MsgL .
  ops 0 1 first last : -> Msg [ctor] . 
  op nil : -> MsgL [ctor] . 
  op _;_ : MsgL MsgL -> MsgL [ctor assoc id: nil] .

  --- state representation
  sort Conf .
  op <_,_,_,_,_,_> : Sender Bool MsgL MsgL Bool Receiver -> Conf [ctor] . 
endfm


mod BRP is
  protecting BRP-SYNTAX .

  var S : Sender .  var R : Receiver . var B : Bool .
  var M M' : Msg .  vars K L : MsgL .  vars A T : Bool . 

--- client side
  rl [req] : < idle,	   A,     nil,   nil,    false, R >
          => < set(first), false, nil,   nil,    false, R > . 
  rl [snd] : < snd(M),     A,     K,     L,      T,    R >
          => < snd(M),     A,     K ; M, L,      T,    R > .
 crl [acc] : < snd(M),     A,     K,     M' ; L, T,    R >
          => < S,          A,     K,     L,      T,    R > 
    if S := (if M == M' then acc(M) else snd(M) fi) .
 crl [los] : < snd(M),     A,     K,     nil,    T,    R >
          => < idle,       true,  K,     nil,    T,    R > 
    if M =/= first .

  eq < set(M), A, K,     L, T, R > 
   = < snd(M), A, K ; M, L, T, R > .

  rl [sel1] : acc(first) => set(0) .  
  rl [sel2] : acc(first) => set(last) .
  rl [sel3] : acc(0)     => set(1) .  
  rl [sel4] : acc(0) 	 => set(last) .
  rl [sel5] : acc(1)     => set(0) .  
  rl [sel6] : acc(1) 	 => set(last) .
  rl [sel7] : acc(last)  => idle .

--- server side
  crl [rec]  : < S, false, M ; K, L,     T, R >
            => < S, false, K,     L ; M, B, rec(M) > 
     if R =/= rec(M) /\ B := (if M == first then true else T fi).
  rl  [ign]  : < S, A,     M ; K, L,     T,     rec(M) >
            => < S, A,     K,     L ; M, T,     rec(M) > .
  crl [nil]  : < S, A,     nil,   L,     T,     rec(M) >
            => < S, A,     nil,   L,     false,  wait   >
   if M == last or A == true .
endm

mod BRP-ABS is
  inc BRP .

  var S : Sender . var R : Receiver . vars M M' : Msg .   
  vars K L KL : MsgL . vars A T B : Bool .

--- abstraction
  eq < S, A, KL ; M ; M ; K, L, T, R >
   = < S, A, KL ; M ; K,     L, T, R > .
  eq < S, A, K, KL ; M ; M ; L, T, R >
   = < S, A, K, KL ; M ; L,     T, R > .

--- coherence completion
 crl [acc'] : < snd(M), A,     K,     M' ; L, T,  R >
          => < S,      A,     K,     M' ; L, T,  R >
    if S := (if M == M' then acc(M) else snd(M) fi) .
 crl [rec'] : < S,      false, M ; K, L,      T, R >
          => < S,      false, M ; K, L ; M,  B, rec(M) > 
     if R =/= rec(M) /\ B := (if M == first then true else T fi).
  rl [ign'] : < S,      A,     M ; K, L,      T,     rec(M) >
          => < S,      A,     M ; K, L ; M,  T,     rec(M) > .
endm
