***(
Copyright 2014 Extensions of Logic Programming - Universitat Politècnica de València
 
Permission is hereby granted, free of charge, to any person obtaining a copy of 
this software and associated documentation files (the "Software"), to deal in 
the Software without restriction, including without limitation the rights to use, 
copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
Software, and to permit persons to whom the Software is furnished to do so, 
subject to the following conditions:
 
The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.
 
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
)*** 

--------------------------------------------------------------------------------
---                                                   To be run on Mau-Dev 2.7.1
---                                                safe-tools.dsic.upv.es/maudev
---                                                         Author: Julia Sapiña
--------------------------------------------------------------------------------

load acuos.maude
load elp.maude

mod IJULIENNE is
    pr ELP-AUTOFIX .
    pr ELP-QUERY .
    pr ELP-JSON .
    
    var M : Module .
    var N : Nat .
    var B : Bool .
    vars STR STR' : String .
    var TR : Trace .
    var IT : InsTrace .
    vars S S* T T* T' PAT : Term .
    vars TL TL' : TermList .
    var ODS : OpDeclSet .
    var SP : Set{Position} .
    var NTL : NodeTermList .
    var TYP : Type .
    var R : Rule .
    var E : Equation .
    var SIGMA : Substitution .
    var P : Position .
    
    op IJULIENNE-BEG_IJULIENNE-END : String -> String .
    op IJULIENNE-BEG_IJULIENNE-END : Term -> String .
    op IJULIENNE-BEG_IJULIENNE-END : Trace -> String .
    op IJULIENNE-BEG_IJULIENNE-END : InsTrace -> String .
    op IJULIENNE-ERR : -> String .
    op IJULIENNE-PARSE : -> String .
    
    op parseInputs : Module Term -> String .
        eq parseInputs(M,T) = IJULIENNE-BEG IJULIENNE-PARSE IJULIENNE-END .
    op parseInputs : Module String -> String .
        eq parseInputs(M,STR) = IJULIENNE-BEG if (parseTerm(M,STR) =/= empty) then IJULIENNE-PARSE else IJULIENNE-ERR fi IJULIENNE-END .
    op parseInputs : Module Trace -> String .
        eq parseInputs(M,TR) = IJULIENNE-BEG IJULIENNE-PARSE IJULIENNE-END .
    op parseInputs : Module InsTrace -> String .
        eq parseInputs(M,IT) = IJULIENNE-BEG IJULIENNE-PARSE IJULIENNE-END .
    op parseQuery : Module String -> String .
        eq parseQuery(M,STR) = IJULIENNE-BEG parseTerm(M,STR) IJULIENNE-END .
    
    op generate : Module String -> String .
        eq generate(M,STR) = 
            if (parseTerm(M,STR) =/= empty) 
            then generate(M,parseTerm(M,STR))
            else IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END
            fi .

    op generate : Module Term -> String .
        ceq generate(M,T) = IJULIENNE-BEG (IT (S ->^{E,SIGMA,P} T')) IJULIENNE-END if (IT (S ->^{E,SIGMA,P} T')) := buildInsTraceEQ(M,T,redTrace(M,T,false)) .
        eq generate(M,T) = IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END [owise] .

    op generate : Module String String -> String .
        eq generate(M,STR,STR') = 
            if (parseTerm(M,STR) =/= empty and-then parseTerm(M,STR') =/= empty) 
            then generate(M,parseTerm(M,STR),parseTerm(M,STR'))
            else IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END
            fi .

    op generate : Module Term Term -> String .
        eq generate(M,S,T) = 
            if (buildInsTrace(M,S,T) == nil) 
            then IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END
            else IJULIENNE-BEG buildInsTrace(M,S,T) IJULIENNE-END
            fi .

    op initialize : Module String -> String .
        eq initialize(M,STR) = 
            if (parseTerm(M,STR) =/= empty)
            then initialize(M,buildInsTraceEQ(M,parseTerm(M,STR),redTrace(M,parseTerm(M,STR),false)))
            else IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END
            fi .
        eq initialize(M,STR) = IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END [owise] .
    
    op initialize : Module Term -> String .
        eq initialize(M,T) = initialize(M,buildInsTraceEQ(M,T,redTrace(M,T,false))) .
    
    op initialize : Module InsTrace -> String .
        eq initialize(M,(nil).InsTrace) = IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END .
        eq initialize(M,(S ->^{E,SIGMA,P} T) IT) = IJULIENNE-BEG "{ELP-DQtermELP-DQ:" + json(M,S) + ",ELP-DQtraceELP-DQ:[" + json(M,(S ->^{E,SIGMA,P} T) IT) + "],ELP-DQkindsELP-DQ:[" + json(getKinds(M)) + "]}" IJULIENNE-END .
        eq initialize(M,(S ->^{R,SIGMA,P} T) IT) = IJULIENNE-BEG "{ELP-DQtermELP-DQ:" + json(M,S) + ",ELP-DQtraceELP-DQ:[" + json(M,(S ->^{R,SIGMA,P} T) IT) + "],ELP-DQkindsELP-DQ:[" + json(getKinds(M)) + "]}" IJULIENNE-END .

    op initialize : Module Trace -> String .
        eq initialize(M,{T,TYP,R} TR) = IJULIENNE-BEG "{ELP-DQtermELP-DQ:" + json(M,getFirstTerm(buildInsTraceRL(M,{ T,TYP,R } TR))) + ",ELP-DQtraceELP-DQ:[" + json(M,buildInsTraceRL(M,{ T,TYP,R } TR)) + "],ELP-DQkindsELP-DQ:[" + json(getKinds(M)) + "]}" IJULIENNE-END .
        eq initialize(M,TR) = IJULIENNE-BEG IJULIENNE-ERR IJULIENNE-END [owise] .
        
    op doForward : Module InsTrace Term OpDeclSet -> String .
        eq doForward(M,IT,S*,ODS) = IJULIENNE-BEG "{ELP-DQsliceELP-DQ:" + json(M,S*) + "," + json(M,IT,fwdSlicing(M,IT,S*,nil,getNC(S*)),ODS) + "}" IJULIENNE-END .
    op doForward : Module InsTrace Position OpDeclSet -> String .
        eq doForward(M,IT,SP,ODS) = IJULIENNE-BEG "{ELP-DQsliceELP-DQ:" + json(M,getTerm(slice(M,getFirstTerm(IT),Lambda,extendPos(SP),0))) + "," + json(M,IT,fwdSlicing(M,IT,getTerm(slice(M,getFirstTerm(IT),Lambda,extendPos(SP),0)),nil,0),ODS) + "}" IJULIENNE-END .
    
    op doBackward : Module InsTrace Term OpDeclSet -> String .
        eq doBackward(M,IT,T*,ODS) = IJULIENNE-BEG "{ELP-DQsliceELP-DQ:" + json(M,getFirstTerm(getTrace(bckSlicing(M,IT,T*,nil,getNC(T*))))) + "," + json(M,IT,bckSlicing(M,IT,T*,nil,getNC(T*)),ODS) + "}" IJULIENNE-END .
    op doBackward : Module InsTrace Position OpDeclSet -> String .
        eq doBackward(M,IT,SP,ODS) = IJULIENNE-BEG "{ELP-DQsliceELP-DQ:" + json(M,getFirstTerm(getTrace(bckSlicing(M,IT,getTerm(slice(M,getLastTerm(IT),Lambda,extendPos(SP),0)),nil,getNC(slice(M,getLastTerm(IT),Lambda,extendPos(SP),0)))))) + "," + json(M,IT,bckSlicing(M,IT,getTerm(slice(M,getLastTerm(IT),Lambda,extendPos(SP),0)),nil,getNC(slice(M,getLastTerm(IT),Lambda,extendPos(SP),0))),ODS) + "}" IJULIENNE-END .
    
    op doOrigins : Module InsTrace Term OpDeclSet -> String .
        eq doOrigins(M,IT,T*,ODS) = IJULIENNE-BEG "{ELP-DQsliceELP-DQ:" + json(M,getFirstTerm(getTrace(bckSlicing(M,IT,T*,nil,getNC(T*))))) + "," + json(M,IT,bckSlicing(M,IT,T*,nil,getNC(T*)),ODS) + "}" IJULIENNE-END .
    op doOrigins : Module InsTrace Position OpDeclSet -> String .
        eq doOrigins(M,IT,SP,ODS) = IJULIENNE-BEG "{ELP-DQsliceELP-DQ:" + json(M,getFirstTerm(getTrace(bckSlicing(M,IT,getTerm(invSlice(M,getLastTerm(IT),Lambda,compactPos(SP),0)),nil,getNC(invSlice(M,getLastTerm(IT),Lambda,compactPos(SP),0)))))) + "," + json(M,IT,bckSlicing(M,IT,getTerm(invSlice(M,getLastTerm(IT),Lambda,compactPos(SP),0)),nil,getNC(invSlice(M,getLastTerm(IT),Lambda,compactPos(SP),0))),ODS) + "}" IJULIENNE-END .

    op doQuery : Module NodeTermList Term -> String .
        eq doQuery(M,NTL,PAT) = IJULIENNE-BEG "{ELP-DQqueryELP-DQ:[" + json(doQuery'(M,NTL,PAT)) + "]}" IJULIENNE-END .

    op doQuery' : Module NodeTermList Term -> QueryResult .
        eq doQuery'(M,nil,PAT) = nil .
        eq doQuery'(M,{N,T} NTL,PAT) = (N :: findMatching(M,T,PAT,Lambda,Lambda,noF)) doQuery'(M,NTL,PAT) .
endm
